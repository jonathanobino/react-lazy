{"mappings":"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","sources":["src/lazyLoadBackgroundImage.tsx","src/lazyLoadImage.tsx","src/lazyLoadFrame.tsx","src/lazyLoadComponent.tsx","src/useIsInViewport.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react' // eslint-disable-line no-unused-vars\nimport useIsInViewPort from './index'\n\nexport default function LazyBackgroundImage(props: any) {\n  const [setRef, link, isViewable] = useIsInViewPort(props)\n\n  const [style, setStyle] = useState({\n    backgroundImage: `url(${link})`,\n    ...props.style,\n  })\n\n  useEffect(() => {\n    setStyle({\n      backgroundImage: `url(${link})`,\n      ...props.style,\n    })\n  }, [link, isViewable])\n\n  return (\n    <div\n      className={props.className}\n      style={style}\n      ref={(node) => {\n        setRef(node)\n      }}\n    >\n      {props.children}\n    </div>\n  )\n}\n","import React from 'react' // eslint-disable-line no-unused-vars\nimport useIsInViewPort from './index'\n\nexport default function LazyImage(props: any) {\n  const [setRef, link] = useIsInViewPort(props)\n\n  return (\n    <div\n      ref={(node) => {\n        setRef(node)\n      }}\n    >\n      <img\n        src={link}\n        alt={props.alt}\n        style={props.style}\n        className={props.className}\n      />\n    </div>\n  )\n}\n","import React from 'react' // eslint-disable-line no-unused-vars\nimport useIsInViewPort from './index'\n\nexport default function LazyFrame(props: any) {\n  const [setRef, link] = useIsInViewPort(props)\n\n  return (\n    <iframe\n      height={props.height || '500'}\n      scrolling={props.scrolling || 'no'}\n      src={link}\n      frameBorder={props.frameBorder || 'no'}\n      allowFullScreen={props.allowFullScreen || true}\n      style={props.style || {}}\n      ref={(node) => {\n        setRef(node)\n      }}\n      {...props}\n    />\n  )\n}\n","import React from 'react'\nimport useIsInViewport from './index'\n\nexport default function LazyComponent(props: any) {\n  const [setRef, link, isVisible] = useIsInViewport(props)\n\n  if (!isVisible)\n    return (\n      <div\n        ref={(node) => {\n          setRef(node)\n        }}\n        style={{\n          height: '300px',\n          width: '300px',\n          ...props.style,\n        }}\n      ></div>\n    )\n\n  return <div>{props.children}</div>\n}\n","import { useState, useEffect, useMemo, useCallback } from 'react'\n\ninterface InstanceElement {\n  makeItVisible: () => void\n  element: HTMLElement | null\n  offset: number\n}\n\n// array with all the elements that are waiting to be shown in the viewport\nconst elements = new Set<InstanceElement>()\n\nconst CheckIfRender = {\n  // top: the position of the element in relation with the top of the browser\n  // left: the position of the element in relation with the left of the browser\n  // offset: the desired offset of the element in relation of the viewport\n  isInViewPort: ({\n    offset,\n    top,\n    left,\n  }: {\n    offset: number\n    top: number\n    left: number\n  }) => top < window.innerHeight + offset && left < window.innerWidth + offset,\n\n  calculateNewPosition: (elem: InstanceElement) => {\n    const { top, left } = elem.element?.getBoundingClientRect() || {\n      top: 0,\n      left: 0,\n    }\n\n    return {\n      ...elem,\n      top,\n      left,\n    }\n  },\n  addElement: function (element: InstanceElement) {\n    //the distance from the pixel 0,0 and the top of the element\n    elements.add(element)\n    //check if has already been started the rAF cycle\n    if (CheckIfRender.isListenerAttached === 0) {\n      CheckIfRender.isListenerAttached = window.requestAnimationFrame(\n        CheckIfRender.eventHandler\n      )\n    }\n  },\n  eventHandler: function () {\n    //if there is no more element to lazy load remove the listener/rAF\n    if (elements.size === 0) {\n      CheckIfRender.removeScrollHandler()\n    } else {\n      elements.forEach((elem) => {\n        const haveToShow = CheckIfRender.isInViewPort(\n          CheckIfRender.calculateNewPosition(elem)\n        )\n        if (haveToShow) {\n          elem.makeItVisible()\n          // remove element from the list of elements to lazy load\n          CheckIfRender.removeElementFromList(elem)\n        }\n      })\n      CheckIfRender.isListenerAttached = window.requestAnimationFrame(\n        CheckIfRender.eventHandler\n      )\n    }\n  },\n\n  removeScrollHandler: function () {\n    window.cancelAnimationFrame(CheckIfRender.isListenerAttached)\n    CheckIfRender.isListenerAttached = 0\n  },\n  //When an element is unloaded remove it from the list of elements that are waiting to be lazy-loaded\n  removeElementFromList: function (toRemove: InstanceElement) {\n    elements.delete(toRemove)\n  },\n  isListenerAttached: 0, // intended as not set\n}\n\nexport default function useRenderIfInViewPort(props: {\n  link: string\n  offset: number\n}): [Function, string, boolean] {\n  const [link, setLink] = useState('')\n  const [visible, setVisible] = useState(false)\n\n  const [ref, setRef] = useState(null)\n\n  const thisInstance = useMemo(() => {\n    return {\n      element: ref,\n      makeItVisible,\n      offset: props.offset || 100,\n    }\n  }, [ref, props])\n\n  const getRef = useCallback((node) => {\n    if (node !== null) setRef(node)\n  }, [])\n\n  function makeItVisible() {\n    if (props.link) setLink(() => props.link)\n    setVisible(() => true)\n  }\n\n  useEffect(() => {\n    if (ref !== null)\n      // add the element to the array of elements that are waiting to be lazy loaded\n      CheckIfRender.addElement(thisInstance)\n    return () =>\n      // if the element is unloaded remove the element from the list of elements that needs to be lazy loader\n      CheckIfRender.removeElementFromList(thisInstance)\n  }, [ref])\n\n  return [getRef, link, visible]\n}\n"],"names":["$6e38eea936045ca0$export$2e2bcd8739ae039","props","setRef","link","isViewable","$03b515f3f8c77d8f$export$2e2bcd8739ae039","style","setStyle","$9w1Q4$react","useState","backgroundImage","useEffect","$9w1Q4$reactjsxruntime","jsx","className","ref","node","children","$f6f596272f209e0c$export$2e2bcd8739ae039","src","alt","$8e3d626f2d1eebd8$export$2e2bcd8739ae039","height","scrolling","frameBorder","allowFullScreen","$c17687259f8b5ddf$export$2e2bcd8739ae039","isVisible","width","$03b515f3f8c77d8f$var$elements","Set","$03b515f3f8c77d8f$var$CheckIfRender","isInViewPort","offset","top","left","window","innerHeight","innerWidth","calculateNewPosition","elem","element","getBoundingClientRect","addElement","add","isListenerAttached","requestAnimationFrame","eventHandler","size","removeScrollHandler","forEach","makeItVisible","removeElementFromList","cancelAnimationFrame","toRemove","delete","setLink","visible","setVisible","thisInstance","useMemo","getRef","useCallback"],"version":3,"file":"index.js.map"}